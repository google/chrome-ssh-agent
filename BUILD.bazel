load("@gazelle//:def.bzl", "gazelle")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@rules_pkg//:pkg.bzl", "pkg_zip")
load("@rules_pkg//pkg:mappings.bzl", "pkg_filegroup", "pkg_files")
load("@rules_go//go:def.bzl", "TOOLS_NOGO", "nogo")

# Force Gazelle to choose the correct target when there are multiple go_library
# targets in a single package.
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/agentport //go/agentport
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/chrome //go/chrome
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/dom //go/dom
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/jsutil //go/jsutil
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/keys //go/keys
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/message //go/message
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/message/fakes //go/message/fakes
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/optionsui //go/optionsui
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/storage //go/storage
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/storage/testing //go/storage/testing
# gazelle:resolve go github.com/google/chrome-ssh-agent/go/testutil //go/testutil

gazelle(
    name = "gazelle",
    command = "fix",
)

nogo(
    name = "chrome_ssh_agent_nogo",
    config = ":nogo-config.json",
    visibility = ["//visibility:public"],
    deps = TOOLS_NOGO + [
        # Prohibit build tags (e.g., //go:build ... ) within tests, as these may
        # cause tests to silently be skipped unless we are extremely careful.
        "//nogo/testbuildtags",
    ],
)

exports_files([
    "go.mod",
    "go.sum",
    "package.json",
    "package-lock.json",
])

npm_link_all_packages(name = "node_modules")

pkg_files(
    name = "pkg_doc",
    srcs = [
        ":CONTRIBUTING.md",
        ":LICENSE",
        ":README.md",
    ],
)

pkg_filegroup(
    name = "pkg_common",
    srcs = [
        ":pkg_doc",
        "//go/background:pkg",
        "//go/options:pkg",
        "//html:pkg",
        "//img:pkg",
    ],
)

pkg_files(
    name = "pkg_manifest",
    srcs = [
        ":manifest.json",
    ],
)

pkg_files(
    name = "pkg_manifest_beta",
    srcs = [
        ":manifest-beta.json",
    ],
    # Manifest must end up with well-known name.
    renames = {
        "manifest-beta.json": "manifest.json",
    },
)

pkg_zip(
    name = "chrome-ssh-agent",
    srcs = [
        ":pkg_common",
        ":pkg_manifest",
    ],
    visibility = ["//visibility:public"],
)

pkg_zip(
    name = "chrome-ssh-agent-beta",
    srcs = [
        ":pkg_common",
        ":pkg_manifest_beta",
    ],
    visibility = ["//visibility:public"],
)
